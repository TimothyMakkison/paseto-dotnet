name: CI

on:
  # Trigger the workflow on push or pull request,
  # but only for the master branch
  push:
    branches:
    - master
    paths:
     - '.github/**'
     - 'src/**'
     - build.cake
     - CodeCoverage.runsettings
     - dotnet-tools.json
     - global.json
     - Key.snk
     - Paseto.sln
  pull_request:
    branches:
    - master
    paths:
     - 'src/**'
     - build.cake
     - CodeCoverage.runsettings
     - dotnet-tools.json
     - global.json
     - Key.snk
     - Paseto.sln
  release:
    types:
    - published

env:
  # Disable the .NET logo in the console output.
  DOTNET_NOLOGO: true
  # Set the DOTNET_SKIP_FIRST_TIME_EXPERIENCE environment variable to stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Set the build number in MinVer
  MINVERBUILDMETADATA: build.${{github.run_number}}
  # Set artifacts directory
  BUILD_ARTIFACT_PATH: './Artifacts'

jobs:
  build:
    name: Build on ${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v1
    - name: 'Git Fetch Tags'
      run: git fetch --tags
    - name: 'Install .NET SDK'
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: |
          6.0.x
    - name: '.NET Restore'
      run: dotnet tool restore
    - name: 'Build Project'
      run: dotnet cake --target=Build
    - name: 'Run Unit Tests'
      run: dotnet cake --target=Test
    - name: 'Install ReportGenerator'
      run: dotnet tool install dotnet-reportgenerator-globaltool --tool-path ./tools
    - name: 'Run Report Coverage Generator'
      run: dotnet cake --target=CoverageReport
    - name: 'Pack NuGet'
      run: dotnet cake --target=Pack
    - name: 'Publish Artifacts'
      uses: actions/upload-artifact@v2
      with:
        name: ${{matrix.os}}
        path: ${{env.BUILD_ARTIFACT_PATH}}

  coverage:
    name: 'Process Coverage'
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: 'Download Artifact'
      uses: actions/download-artifact@v2
    - name: 'Upload Coverage'
      uses: codecov/codecov-action@v2
      with:
        file: coverage.cobertura.xml
        fail_ci_if_error: false

  push-to-github-packages:
    name: 'Push GitHub Packages'
    needs: build
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'
    environment:
      name: 'GitHub Packages'
      url: https://github.com/daviddesmet/paseto-dotnet/packages
    permissions:
      packages: write
    runs-on: windows-latest
    steps:
    - name: 'Download Artifact'
      uses: actions/download-artifact@v2
      with:
        name: 'windows-latest'
    - name: 'NuGet Push'
      run: dotnet nuget push .\windows-latest\*.nupkg --source https://nuget.pkg.github.com/daviddesmet/index.json --skip-duplicate --api-key ${{secrets.GITHUB_TOKEN}}

  push-to-nuget:
    name: 'Push NuGet Packages'
    needs: build
    if: github.event_name == 'release'
    environment:
      name: 'NuGet'
      url: https://www.nuget.org/packages/Paseto.Core
    runs-on: windows-latest
    steps:
    - name: 'Download Artifact'
      uses: actions/download-artifact@v2
      with:
        name: 'windows-latest'
    - name: 'NuGet Push'
      run: |
        Get-ChildItem .\windows-latest -Filter *.nupkg |
        Where-Object { !$_.Name.Contains('preview') } |
        ForEach-Object { dotnet nuget push $_ --source https://api.nuget.org/v3/index.json --skip-duplicate --api-key ${{secrets.NUGET_API_KEY}} }
      shell: pwsh
